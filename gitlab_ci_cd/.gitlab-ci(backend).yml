# Ниже результат работы из Спринт 6.

stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}-RELEASE
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

cache:
  key: $CI_COMMIT_REF_NAME
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

build-backend-job:
  stage: build
  script:
    - export SPRING_FLYWAY_ENABLED=false # Выключаем миграции
    - cd backend
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}
    - echo $CI_JOB_URL'/artifacts/download' > url.txt
  artifacts:
    expire_in: 2 days
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - backend/url.txt
      - ${CI_PROJECT_DIR}/.m2/

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - build-backend-job
  script:
    - export SPRING_FLYWAY_ENABLED=false # Выключаем миграции
    - cd backend/
    - >
      mvn verify sonar:sonar
      -Dsonar.projectKey="${SONAR_PROJECT_KEY}"_backend
      -Dsonar.host.url="${SONARQUBE_URL}"
      -Dsonar.login="${SONAR_PROJECT_KEY_BACK}"
      -Dsonar.qualitygate.wait=true -Dmaven.repo.local=./.m2/repository
      -Dsonar.projectName="${SONAR_PROJECT_KEY}"_backend

# Example Maven + SAST https://docs.gitlab.com/ee/user/application_security/sast/#pre-compilation
gitlab-sast:
  stage: test
  needs:
    - build-backend-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml

# Отправка артефактов на Nexus. Доп. конфиги в settings.xml, pom.xml
release-backend-upload-job:
  stage: release
  needs:
    - sonarqube-backend-sast
    - gitlab-sast
  script:
    - cd backend
    - echo $SPRING_FLYWAY_ENABLED
    - SPRING_FLYWAY_ENABLED=false
    - echo $SPRING_FLYWAY_ENABLED
    - >
      mvn deploy -DskipTests 
      -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository 
      -s settings.xml 
      -Dversion.application=${VERSION}
  # Специальная сущность, чтобы в GitLab по кнопке play запускался deploy
  environment:
    name: production

deploy-backend-job:
  stage: deploy
  needs:
    - release-backend-upload-job
  # Подключение к хосту
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    # Сохраняем сгенерированный ранее приватный ключ для ранера
    - echo "$RUNNER_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$RUNNER_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Загружаем файлик сервиса
    - scp ./backend/sausage-store-backend.service ${PRACTICUM_SERVER_DEV_USER}@${PRACTICUM_SERVER_DEV_HOST}:/home/${PRACTICUM_SERVER_DEV_USER}/sausage-store-backend.service
    # Подключаемся к серверу, стартуем новый терминал, прокидываем в него переменные из ansible variables и запускаем скрипт, который лежит на ранере
    - ssh ${PRACTICUM_SERVER_DEV_USER}@${PRACTICUM_SERVER_DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "PRACTICUM_SERVER_DEV_HOST=${PRACTICUM_SERVER_DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}"; export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}";setsid /bin/bash -s " < ./backend/deploy.sh
    - echo $CI_COMMIT_REF_SLUG
  environment:
    name: production
    url: http://example.com/
    auto_stop_in: 1h
    # В UI по нажатию кнопки стоп запустится action-stop-environment
    on_stop: action-stop-environment
  # Деплой по кнопке в UI
  rules:
    - when: manual

action-stop-environment:
  # Выполняется при остановке environment.
  # Так же в environment появится кнопка play
  stage: deploy
  when: manual
  script:
    - echo "Deleting deploy"
  environment:
    name: production
    action: stop

telegram-notification-backend:
  stage: notify
  needs:
    - deploy-backend-job
  script:
    - cd backend
    - export LINK_TO_DW_ARTIFACT=$(cat url.txt)
    - >-
      curl -X POST -H "Content-Type: application/json" -d '{"chat_id": "-XXXXXXXX", "text": "Artemiy Zhuravlev. 'deploy-backend-job' is completed. Link to downlad:'$LINK_TO_DW_ARTIFACT'.", "disable_notification": true}' https://api.telegram.org/botXXXXXXXX:XXXXXXXX/sendMessage
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
